syntax = "proto3";

package fn_proto;

service Functions {
  rpc List (FunctionListRequest) returns (FunctionListReply);

  rpc Load (stream FunctionLoadPartRequest) returns (FunctionLoadReply);

  rpc Unload (FunctionUnloadRequest) returns (FunctionUnloadReply);
}

message FunctionListRequest {}

message FunctionListReply {
  int32 item_no = 1;
  repeated FunctionListReplyItem items = 2;
}

message FunctionListReplyItem {
  string name = 1;
  string status = 2;
  int64 successes = 3;
  int64 failures = 4;
  int64 total_messages = 5;
  double fail_rate_per_minute = 6;
}

message FunctionLoadPartRequest {
  string file_name = 1;
  string inputs = 2;
  string outputs = 3;
  bytes runnable_bytes = 4;
}

message FunctionLoadReply {
  bool success = 1;
  optional string error_message = 2;
  int64 time = 3;
}

message FunctionUnloadRequest {
  string module_name = 1;
}

message FunctionUnloadReply {
  bool success = 1;
  optional string error_message = 2;
  string unloaded_module_name = 3;
  int64 time = 4;
}

service Subscriber {
  rpc Subscribe(stream Topic) returns (stream TopicResult);
}

message Topic {
  repeated string topic_names = 1;
}

message TopicResult {
  repeated TopicMessage messages = 1;
}

message TopicMessage {
  bytes key = 1;
  bytes value = 2;
}

service Executor {
  rpc execute(ExecuteRequest) returns (ExecuteResponse);
}

message ExecuteRequest {
  string module_name = 1;
  Payload payload = 2;
}

message ExecuteResponse {
  Payload payload = 3;
}

message Record {
  string name = 1;
  repeated Field fields = 2;
}

message Field {
  string name = 1;
  string type = 2;
}

message Schema {
  repeated Record record_types = 1;
}

message Payload {
  string input = 1;
  string output = 2;
  Schema input_schema = 3;
  Schema output_schema = 4;
  bytes body = 5;
}